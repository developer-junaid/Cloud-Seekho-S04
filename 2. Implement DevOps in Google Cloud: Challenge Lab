Video: https://youtu.be/GUPAnzte4fQ


Implement DevOps in Google Cloud: Challenge Lab
====================

Start Lab:
--------------------


Task 1: Check Jenkins pipeline has been configured
--------------------------
gcloud config set compute/zone us-east1-b

-

git clone https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/sample-app

gcloud container clusters get-credentials jenkins-cd

-

kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value account)


helm repo add stable https://charts.helm.sh/stable

helm repo update

helm install cd stable/jenkins



-

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &
printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo

-

cd sample-app
kubectl create ns production
kubectl apply -f k8s/production -n production
kubectl apply -f k8s/canary -n production
kubectl apply -f k8s/services -n production

kubectl get svc
kubectl get service gceme-frontend -n production


configure Credential:
-------------------
Click web preview > preview on port 8080

copy password and username is admin > Sign in


---
Create Multibranch pipeline of sample-app


Click Manage Jenkins

Click Manage Credentials

Click jenkins > Global credentials >  adding some credential > Google Service account from metadata > OK



-
Go to dashboard > Add New Item
Enter name : sample-app
Click Multibranch pipeline > OK


Branch Sources: Git

Project Repository: https://source.developers.google.com/p/[YOUR_PROJECT_ID]/r/sample-app
Credentials: qwiklabs service account
Check "Periodically if not otherwise run" 
Select 1 Minute and Save

---



git init
git config credential.helper gcloud.sh
git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/sample-app

-

git config --global user.email "<user email>" 
(Set user name here as email)

git config --global user.name "<user name>"
(Set name from username here)


-

git add .
git commit -m "initial commit"
git push origin master


Task 2 : Create Multibranch pipeline of sample-app
------------------------------------------------------

git checkout -b new-feature



Open Editor > Open in new window > Open folder qwiklabs account

Edit file sample-app > html.go and edit your color
Edit file sample-app > main.go and edit your version
File > Save All

--------------------
(Dashboard > sample-app > Status to






git add Jenkinsfile html.go main.go
git commit -m "Version <YOUR_VERSION>"
git push origin new-feature


Task 3: Check that Jenkins has deployed a canary pipeline
------------------------------------



curl http://localhost:8001/api/v1/namespaces/new-feature/services/gceme-frontend:80/proxy/version
kubectl get service gceme-frontend -n production
git checkout -b canary
git push origin canary
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
git checkout master
git push origin master


Task 4: Check that Jenkins has merged a canary pipeline with production
-------------------------------------------------

export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done

kubectl get service gceme-frontend -n production

git merge canary
git push origin master
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)

-----------

Reload the status of app and let all tasks finish first > NOW COMPLETE ALL THE CHECKBOXES


COMPLETED !
